node ('nodes'){

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])

def mavenHome = tool name: "maven3.8.6"

echo "the job name is: ${env.JOB_NAME}"
echo "the node name is: ${env.NODE_NAME}"
echo "the build no is: ${env.BUILD_NUMBER}"


try {
send_notifications("STARTED")
stage('CheckoutCode'){
git branch: 'development ', credentialsId: '7af6e053-e31f-4b53-9909-1d508c14d84d', url: 'https://github.com/anil13020/maven-web-application.git' 
}

stage('Build'){
sh "${mavenHome}/bin/mvn clean package"
}

stage('SonarqubeReport'){
sh "${mavenHome}/bin/mvn sonar:sonar"
}

stage('UploadIntoNexus'){
sh "${mavenHome}/bin/mvn deploy"
}

stage('DeployIntoTomcat'){
sshagent(['6a11775e-b833-4bbf-8961-373743d24263']) {
    sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.47.73:/opt/apache-tomcat-9.0.70/webapps"
}
}

} 

catch (e) {
    
    currentBuild.result = "FAILED"
  
}
finally {
    
    send_notifications(currentBuild.result)
  }
}

def send_notifications(String buildStatus = 'STARTED') {
 
  buildStatus =  buildStatus ?: 'success'

 
  def color = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

 
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'success') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  slackSend (color: colorCode, message: summary, channel: '#icicibank')
}


